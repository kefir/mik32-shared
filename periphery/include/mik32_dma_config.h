#ifndef DMA_MC_H_INCLUDED
#define DMA_MC_H_INCLUDED

#define DMA_CHANNEL_COUNT 4

#define DMA_CFG_CH_ENABLE_BIT 0
#define DMA_CFG_CH_PRIOR_BIT 1
#define DMA_CFG_CH_READ_MODE_BIT 3
#define DMA_CFG_CH_WRITE_MODE_BIT 4
#define DMA_CFG_CH_READ_INCREMENT_BIT 5
#define DMA_CFG_CH_WRITE_INCREMENT_BIT 6
#define DMA_CFG_CH_READ_SIZE_BIT 7
#define DMA_CFG_CH_WRITE_SIZE_BIT 9
#define DMA_CFG_CH_READ_BURST_SIZE_BIT 11 // Кол-во байт пакетной передачи:   2^Read_burst_size
#define DMA_CFG_CH_WRITE_BURST_SIZE_BIT 14 // Кол-во байт пакетной передачи:   2^Write_burst_size
#define DMA_CFG_CH_READ_REQ_BIT 17 // выбор канала чтения
#define DMA_CFG_CH_WRITE_REQ_BIT 21 // выбор канала записи
#define DMA_CFG_CH_ACK_READ_BIT 25
#define DMA_CFG_CH_ACK_WRITE_BIT 26
#define DMA_CFG_CH_EN_IRQ_BIT 27

#define DMA_CFG_CH_ENABLE (1 << DMA_CFG_CH_ENABLE_BIT)
#define DMA_CFG_CH_DISABLE (0 << DMA_CFG_CH_ENABLE_BIT)
#define DMA_CFG_CH_PRIOR (0x3 << DMA_CFG_CH_PRIOR_BIT)
#define DMA_CFG_CH_READ_MODE_MEMORY (1 << DMA_CFG_CH_READ_MODE_BIT)
#define DMA_CFG_CH_READ_MODE_PERIPHERY (0 << DMA_CFG_CH_READ_MODE_BIT)
#define DMA_CFG_CH_WRITE_MODE_MEMORY (1 << DMA_CFG_CH_WRITE_MODE_BIT)
#define DMA_CFG_CH_WRITE_MODE_PERIPHERY (0 << DMA_CFG_CH_WRITE_MODE_BIT)
#define DMA_CFG_CH_READ_INCREMENT (1 << DMA_CFG_CH_READ_INCREMENT_BIT)
#define DMA_CFG_CH_READ_NO_INCREMENT (0 << DMA_CFG_CH_READ_INCREMENT_BIT)
#define DMA_CFG_CH_WRITE_INCREMENT (1 << DMA_CFG_CH_WRITE_INCREMENT_BIT)
#define DMA_CFG_CH_WRITE_NO_INCREMENT (0 << DMA_CFG_CH_WRITE_INCREMENT_BIT)
#define DMA_CFG_CH_READ_SIZE_BYTE (0b00 << DMA_CFG_CH_READ_SIZE_BIT) // байт
#define DMA_CFG_CH_READ_SIZE_2BYTE (0b01 << DMA_CFG_CH_READ_SIZE_BIT) // полуслово
#define DMA_CFG_CH_READ_SIZE_4BYTE (0b10 << DMA_CFG_CH_READ_SIZE_BIT) // слово
#define DMA_CFG_CH_READ_SIZE_REZ (0b11 << DMA_CFG_CH_READ_SIZE_BIT) // резерв
#define DMA_CFG_CH_WRITE_SIZE_BYTE (0b00 << DMA_CFG_CH_WRITE_SIZE_BIT) // байт
#define DMA_CFG_CH_WRITE_SIZE_2BYTE (0b01 << DMA_CFG_CH_WRITE_SIZE_BIT) // полуслово
#define DMA_CFG_CH_WRITE_SIZE_4BYTE (0b10 << DMA_CFG_CH_WRITE_SIZE_BIT) // слово
#define DMA_CFG_CH_WRITE_SIZE_REZ (0b11 << DMA_CFG_CH_WRITE_SIZE_BIT) // резерв
#define DMA_CFG_CH_READ_REQ_M (0xF << DMA_CFG_CH_READ_REQ_BIT)
#define DMA_CFG_CH_READ_REQ(v) (((v) << DMA_CFG_CH_READ_REQ_BIT) & DMA_CFG_CH_READ_REQ_M)
#define DMA_CFG_CH_WRITE_REQ_M (0xF << DMA_CFG_CH_WRITE_REQ_BIT)
#define DMA_CFG_CH_WRITE_REQ(v) (((v) << DMA_CFG_CH_WRITE_REQ_BIT) & DMA_CFG_CH_WRITE_REQ_M)
#define DMA_CFG_CH_ACK_READ (1 << DMA_CFG_CH_ACK_READ_BIT)
#define DMA_CFG_CH_ACK_WRITE (1 << DMA_CFG_CH_ACK_WRITE_BIT)
#define DMA_CFG_CH_EN_IRQ (1 << DMA_CFG_CH_EN_IRQ_BIT)
#define DMA_CHANNEL ((1 << DMA_CHANNEL_COUNT) - 1)

#define DMA_STATUS_READY_BIT 0
#define DMA_STATUS_READY_M (DMA_CHANNEL_M << DMA_STATUS_READY_BIT)
#define DMA_STATUS_READY(i) ((1 << (DMA_STATUS_READY_BIT + (i))) & DMA_STATUS_READY_M)
#define DMA_STATUS_IRQ_BIT 1 * DMA_CHANNEL_COUNT
#define DMA_STATUS_IRQ (DMA_CHANNEL_M << DMA_STATUS_IRQ_BIT)

#define DMA_CLEAR_IRQ_BIT 0
#define DMA_STATUS_ERROR_BIT 2 * DMA_CHANNEL_COUNT
#define DMA_STATUS_ERROR (DMA_CHANNEL_M << DMA_STATUS_ERROR_BIT)
#define DMA_STATUS_CURRENT_VALUE_BIT 3 * DMA_CHANNEL_COUNT
#define DMA_STATUS_CURRENT_VALUE (1 << DMA_STATUS_CURRENT_VALUE_BIT)

#define DMA_CONTROL_CLEAR_LOCAL_IRQ_BIT 0
#define DMA_CONTROL_CLEAR_LOCAL_IRQ_M (DMA_CHANNEL_M << DMA_CONTROL_CLEAR_LOCAL_IRQ_BIT)
#define DMA_CONTROL_CLEAR_LOCAL_IRQ(i) ((1 << (DMA_CONTROL_CLEAR_LOCAL_IRQ_BIT + (i))) & DMA_CONTROL_CLEAR_LOCAL_IRQ_M)
#define DMA_CONTROL_CLEAR_GLOBAL_IRQ_BIT (DMA_CHANNEL_COUNT + 0)
#define DMA_CONTROL_CLEAR_GLOBAL_IRQ (1 << DMA_CONTROL_CLEAR_GLOBAL_IRQ_BIT)
#define DMA_CONTROL_CLEAR_ERROR_IRQ_BIT (DMA_CHANNEL_COUNT + 1)
#define DMA_CONTROL_CLEAR_ERROR_IRQ (1 << DMA_CONTROL_CLEAR_ERROR_IRQ_BIT)
#define DMA_CONTROL_GLOBAL_IRQ_ENA_BIT (DMA_CHANNEL_COUNT + 2)
#define DMA_CONTROL_GLOBAL_IRQ_ENA (1 << DMA_CONTROL_GLOBAL_IRQ_ENA_BIT)
#define DMA_CONTROL_ERROR_IRQ_ENA_BIT (DMA_CHANNEL_COUNT + 3)
#define DMA_CONTROL_ERROR_IRQ_ENA (1 << DMA_CONTROL_ERROR_IRQ_ENA_BIT)
#define DMA_CONTROL_CURRENT_VALUE_BIT (DMA_CHANNEL_COUNT + 4)
#define DMA_CONTROL_CURRENT_VALUE (1 << DMA_CONTROL_CURRENT_VALUE_BIT)

#ifndef _ASSEMBLER_
#include <inttypes.h>

typedef struct
{
    volatile uint32_t DESTINATIONS; // 0x00
    volatile uint32_t SOURCE; // 0x04
    volatile uint32_t LEN; // 0x08
    volatile uint32_t CONFIG; // 0x0c
} DMA_CHANNEL_TypeDef;

typedef struct
{
    DMA_CHANNEL_TypeDef CHANNELS[DMA_CHANNEL_COUNT];
    volatile uint32_t CONTROL; // 0x40
} DMA_CONFIG_TypeDef;
#endif

#endif //
