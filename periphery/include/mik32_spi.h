#ifndef SPI_H_INCLUDED
#define SPI_H_INCLUDED

#define SPI_CR_OFFSET 0x00
#define SPI_SR_OFFSET 0x04
#define SPI_IEN_OFFSET 0x08
#define SPI_IDIS_OFFSET 0x0C
#define SPI_IMASK_OFFSET 0x10
#define SPI_ENABLE_OFFSET 0x14
#define SPI_DELAY_OFFSET 0x18
#define SPI_TXD_OFFSET 0x1C
#define SPI_RXD_OFFSET 0x20
#define SPI_SIC_OFFSET 0x24
#define SPI_THR_OFFSET 0x28
#define SPI_MID_OFFSET 0xFC

//
#define SPI_CR_MODE_SEL_BIT 0
#define SPI_CR_CLK_POL_BIT 1
#define SPI_CR_CLK_PH_BIT 2
#define SPI_CR_BAUD_RATE_DIV_BIT 3
#define SPI_CR_REF_CLK_BIT 8
#define SPI_CR_PERI_SEL_BIT 9
#define SPI_CR_CS_BIT 10
#define SPI_CR_MANUAL_CS_BIT 14

#define SPI_CR_CS (0xF << SPI_CR_CS_BIT)
#define SPI_CR_CS_0 (0xE << SPI_CR_CS_BIT)
#define SPI_CR_CS_1 (0xD << SPI_CR_CS_BIT)
#define SPI_CR_CS_2 (0xB << SPI_CR_CS_BIT)
#define SPI_CR_CS_3 (0x7 << SPI_CR_CS_BIT)
#define SPI_CR_CS_NONE (0xF << SPI_CR_CS_BIT)
//
#define SPI_CR_PERI_SEL (1 << SPI_CR_PERI_SEL_BIT)
#define SPI_CR_REF_CLK (1 << SPI_CR_REF_CLK_BIT)
//
#define SPI_CR_BAUD_RATE_DIV (0x7 << SPI_CR_BAUD_RATE_DIV_BIT)
#define SPI_CR_BAUD_RATE_DIV_2 (0x0 << SPI_CR_BAUD_RATE_DIV_BIT)
#define SPI_CR_BAUD_RATE_DIV_4 (0x1 << SPI_CR_BAUD_RATE_DIV_BIT)
#define SPI_CR_BAUD_RATE_DIV_8 (0x2 << SPI_CR_BAUD_RATE_DIV_BIT)
#define SPI_CR_BAUD_RATE_DIV_16 (0x3 << SPI_CR_BAUD_RATE_DIV_BIT)
#define SPI_CR_BAUD_RATE_DIV_32 (0x4 << SPI_CR_BAUD_RATE_DIV_BIT)
#define SPI_CR_BAUD_RATE_DIV_64 (0x5 << SPI_CR_BAUD_RATE_DIV_BIT)
#define SPI_CR_BAUD_RATE_DIV_128 (0x6 << SPI_CR_BAUD_RATE_DIV_BIT)
#define SPI_CR_BAUD_RATE_DIV_256 (0x7 << SPI_CR_BAUD_RATE_DIV_BIT)
#define SPI_CR_BAUD_RATE_DIV_MAX 256
//
#define SPI_CR_MANUAL_CS (1 << SPI_CR_MANUAL_CS_BIT)
//
#define SPI_CR_CLK_PH (1 << SPI_CR_CLK_PH_BIT)
#define SPI_CR_CLK_POL (1 << SPI_CR_CLK_POL_BIT)
#define SPI_CR_MODE_SEL (1 << SPI_CR_MODE_SEL_BIT)
#define SPI_CR_MASTER (1 << SPI_CR_MODE_SEL_BIT)
#define SPI_CR_SLAVE (0 << SPI_CR_MODE_SEL_BIT)

#define SPI_ENABLE_BIT 0
#define SPI_ENABLE_CLEAR_TX_FIFO_BIT 2
#define SPI_ENABLE_CLEAR_RX_FIFO_BIT 3

#define SPI_ENABLE_CLEAR_RX_FIFO (1 << SPI_ENABLE_CLEAR_RX_FIFO_BIT)
#define SPI_ENABLE_CLEAR_TX_FIFO (1 << SPI_ENABLE_CLEAR_TX_FIFO_BIT)
#define SPI_ENABLE (1 << SPI_ENABLE_BIT)

#define SPI_RX_OVERFLOW_BIT 0
#define SPI_MODE_FAIL_BIT 1
#define SPI_TX_FIFO_NOT_FULL_BIT 2
#define SPI_TX_FIFO_FULL_BIT 3
#define SPI_RX_FIFO_NOT_EMPTY_BIT 4
#define SPI_RX_FIFO_FULL_BIT 5
#define SPI_TX_FIFO_UNDERFLOW_BIT 6

#define SPI_SR_RX_OVERFLOW (1 << SPI_RX_OVERFLOW_BIT)
#define SPI_SR_MODE_FAIL (1 << SPI_MODE_FAIL_BIT)
#define SPI_SR_TX_FIFO_NOT_FULL (1 << SPI_TX_FIFO_NOT_FULL_BIT)
#define SPI_SR_TX_FIFO_FULL (1 << SPI_TX_FIFO_FULL_BIT)
#define SPI_SR_RX_FIFO_NOT_EMPTY (1 << SPI_RX_FIFO_NOT_EMPTY_BIT)
#define SPI_SR_RX_FIFO_FULL (1 << SPI_RX_FIFO_FULL_BIT)
#define SPI_SR_TX_FIFO_UNDERFLOW (1 << SPI_TX_FIFO_UNDERFLOW_BIT)

#define SPI_IEN_RX_OVERFLOW (1 << SPI_RX_OVERFLOW_BIT)
#define SPI_IEN_MODE_FAIL (1 << SPI_MODE_FAIL_BIT)
#define SPI_IEN_TX_FIFO_NOT_FULL (1 << SPI_TX_FIFO_NOT_FULL_BIT)
#define SPI_IEN_TX_FIFO_FULL (1 << SPI_TX_FIFO_FULL_BIT)
#define SPI_IEN_RX_FIFO_NOT_EMPTY (1 << SPI_RX_FIFO_NOT_EMPTY_BIT)
#define SPI_IEN_RX_FIFO_FULL (1 << SPI_RX_FIFO_FULL_BIT)
#define SPI_IEN_TX_FIFO_UNDERFLOW (1 << SPI_TX_FIFO_UNDERFLOW_BIT)

#define SPI_IDIS_RX_OVERFLOW (1 << SPI_RX_OVERFLOW_BIT)
#define SPI_IDIS_MODE_FAIL (1 << SPI_MODE_FAIL_BIT)
#define SPI_IDIS_TX_FIFO_NOT_FULL (1 << SPI_TX_FIFO_NOT_FULL_BIT)
#define SPI_IDIS_TX_FIFO_FULL (1 << SPI_TX_FIFO_FULL_BIT)
#define SPI_IDIS_RX_FIFO_NOT_EMPTY (1 << SPI_RX_FIFO_NOT_EMPTY_BIT)
#define SPI_IDIS_RX_FIFO_FULL (1 << SPI_RX_FIFO_FULL_BIT)
#define SPI_IDIS_TX_FIFO_UNDERFLOW (1 << SPI_TX_FIFO_UNDERFLOW_BIT)

#define SPI_IMASK_RX_OVERFLOW (1 << SPI_RX_OVERFLOW_BIT)
#define SPI_IMASK_MODE_FAIL (1 << SPI_MODE_FAIL_BIT)
#define SPI_IMASK_TX_FIFO_NOT_FULL (1 << SPI_TX_FIFO_NOT_FULL_BIT)
#define SPI_IMASK_TX_FIFO_FULL (1 << SPI_TX_FIFO_FULL_BIT)
#define SPI_IMASK_RX_FIFO_NOT_EMPTY (1 << SPI_RX_FIFO_NOT_EMPTY_BIT)
#define SPI_IMASK_RX_FIFO_FULL (1 << SPI_RX_FIFO_FULL_BIT)
#define SPI_IMASK_TX_FIFO_UNDERFLOW (1 << SPI_TX_FIFO_UNDERFLOW_BIT)

#ifndef _ASSEMBLER_
#include <inttypes.h>
typedef struct
{
    volatile uint32_t CR; /* Offset: 0x000 (R/W)    */
    volatile uint32_t SR; /* Offset: 0x004 (R/W)  */
    volatile uint32_t IEN; /* Offset: 0x008 (R/W) */
    volatile uint32_t IDIS; /* Offset: 0x00C (R/W)  */
    volatile uint32_t IMASK; /* Offset: 0x010 (R)  */
    volatile uint32_t ENABLE; /* Offset: 0x014 (R/W)  */
    volatile uint32_t DELAY; /* Offset: 0x018 (R/W)  */
    volatile uint32_t TXD; /* Offset: 0x01C (W)  */
    volatile uint32_t RXD; /* Offset: 0x020 (R)  */
    volatile uint32_t SIC; /* Offset: 0x024 (R/W)  Slave_Idle_Count */
    volatile uint32_t THR; /* Offset: 0x028 (R/W)  TX threshold */
    volatile uint32_t _reserved[0x34]; /* Empty array to fill the space*/
    volatile uint32_t MID; /* Offset: 0x0FC (R)  Module ID 0x01090100 */
} SPI_TypeDef;
#endif

#endif // SPI_H_INCLUDED
