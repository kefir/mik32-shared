#ifndef TIM_H_INCLUDED
#define TIM_H_INCLUDED

#define TIM_VALUE_OFFSET 0x00
#define TIM_TOP_OFFSET 0x04
#define TIM_PRESCALER_OFFSET 0x08
#define TIM_CONTROL_OFFSET 0x0C
#define TIM_ENABLE_OFFSET 0x10

#define TIM_INT_MASK 0x14
#define TIM_INT_CLEAR 0x18
#define TIM_INT_FLAGS 0x1C

#define TIM_CH_BASE 0x80
#define TIM_CH_CONTROL_OFFSET 0x00
#define TIM_CH_OCR_OFFSET 0x04
#define TIM_CH_ICR_OFFSET 0x08
#define TIM_CH_SIZE 0x10

#define TIM_CONTROL_MODE_BIT 0
#define TIM_CONTROL_MODE (0x3 << TIM_CONTROL_MODE_BIT)
#define TIM_CONTROL_CLOCK_BIT 2
#define TIM_CONTROL_CLOCK (0x3 << TIM_CONTROL_CLOCK_BIT)

#define TIM_CONTROL_MODE_UP (0 << TIM_CONTROL_MODE_BIT)
#define TIM_CONTROL_MODE_DOWN (1 << TIM_CONTROL_MODE_BIT)
#define TIM_CONTROL_MODE_BIDIR (2 << TIM_CONTROL_MODE_BIT)

#define TIM_CONTROL_CLOCK (0x3 << TIM_CONTROL_CLOCK_BIT)
#define TIM_CONTROL_CLOCK_PRESCALER (0x0 << TIM_CONTROL_CLOCK_BIT)
#define TIM_CONTROL_CLOCK_TIM_1 (0x1 << TIM_CONTROL_CLOCK_BIT)
#define TIM_CONTROL_CLOCK_TX_PIN (0x2 << TIM_CONTROL_CLOCK_BIT)
#define TIM_CONTROL_CLOCK_TIM_2 (0x3 << TIM_CONTROL_CLOCK_BIT)

#define TIM_PRESCALER_ENABLE_BIT 8
#define TIM_PRESCALER_ENABLE (1 << TIM_PRESCALER_ENABLE_BIT)
#define TIM_PRESCALER_DISABLE (0 << TIM_PRESCALER_ENABLE_BIT)

#define TIM_PRESCALER_BIT 0
#define TIM_PRESCALER (0xFF << TIM_PRESCALER_BIT)

#define TIM_ENABLE_BIT 0
#define TIM_ENABLE (1 << TIM_ENABLE_BIT)
#define TIM_DISABLE (0 << TIM_ENABLE_BIT)
#define TIM_RESET_VALUE_BIT 1
#define TIM_RESET_VALUE (1 << TIM_RESET_VALUE_BIT)

#define TIM_INT_OVERFLOW_BIT 0
#define TIM_INT_OVERFLOW (1 << TIM_INT_OVERFLOW_BIT)
#define TIM_INT_UNDERFLOW_BIT 1
#define TIM_INT_UNDERFLOW (1 << TIM_INT_UNDERFLOW_BIT)

#define TIM_CH_CONTROL_CAPTURE_EDGE_BIT 4
#define TIM_CH_CONTROL_CAPTURE_EDGE (1 << TIM_CH_CONTROL_CAPTURE_EDGE_BIT)
#define TIM_CH_CONTROL_CAPTURE_POS (0 << TIM_CH_CONTROL_CAPTURE_EDGE_BIT)
#define TIM_CH_CONTROL_CAPTURE_NEG (1 << TIM_CH_CONTROL_CAPTURE_EDGE_BIT)

#define TIM_CH_CONTROL_MODE_BIT 5
#define TIM_CH_CONTROL_MODE (3 << TIM_CH_CONTROL_MODE_BIT)
#define TIM_CH_CONTROL_MODE_COMPARE (1 << TIM_CH_CONTROL_MODE_BIT)
#define TIM_CH_CONTROL_MODE_CAPTURE (2 << TIM_CH_CONTROL_MODE_BIT)
#define TIM_CH_CONTROL_MODE_PWM (3 << TIM_CH_CONTROL_MODE_BIT)

#define TIM_CH_CONTROL_ENABLE_BIT 7
#define TIM_CH_CONTROL_ENABLE (1 << TIM_CH_CONTROL_ENABLE_BIT)
#define TIM_CH_CONTROL_DISABLE (0 << TIM_CH_CONTROL_ENABLE_BIT)

#define TIM_CH_CONTROL_INVERTED_PWM_BIT 8
#define TIM_CH_CONTROL_INVERTED_PWM (1 << TIM_CH_CONTROL_INVERTED_PWM_BIT)

#ifndef _ASSEMBLER_
#include <inttypes.h>

typedef struct
{
    volatile uint32_t Control;
    volatile uint32_t OCR;
    volatile uint32_t ICR;
    volatile uint32_t reserved0;
} TIM_Channel_TypeDef;

typedef struct
{
    volatile uint32_t Value; /* Offset: 0x000 (R)  */
    volatile uint32_t Top; /* Offset: 0x004 (R/W)  */
    volatile uint32_t Prescaler; /* Offset: 0x008 (R/W)  */
    volatile uint32_t Control; /* Offset: 0x00C (R/W)  */
    volatile uint32_t Enable; /* Offset: 0x010 (R/W)  */
    volatile uint32_t IntMask; /* Offset: 0x014 (R/W)  */
    volatile uint32_t IntClear; /* Offset: 0x018 (R/W)  */
    volatile uint32_t IntFlags; /* Offset: 0x01C (R)  */
    volatile uint8_t reserved0[0x60];
    TIM_Channel_TypeDef Channels[4];
} TIM_TypeDef;
#endif

#endif // TIM_H_INCLUDED
